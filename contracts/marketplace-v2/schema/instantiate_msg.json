{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "ask_expiry",
    "auction_expiry_offset",
    "auction_max_duration",
    "auction_min_duration",
    "bid_expiry",
    "collector_address",
    "cw721_address",
    "denom",
    "min_price",
    "operators",
    "trading_fee_bps"
  ],
  "properties": {
    "ask_expiry": {
      "description": "Valid time range for Asks (min, max) in seconds",
      "allOf": [
        {
          "$ref": "#/definitions/ExpiryRange"
        }
      ]
    },
    "auction_expiry_offset": {
      "description": "The amount of time a seller has to close an auction that has not met the reserve price",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "auction_max_duration": {
      "description": "The maximum duration of an auction",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "auction_min_duration": {
      "description": "The minimum duration of an auction",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "bid_expiry": {
      "description": "Valid time range for Bids (min, max) in seconds",
      "allOf": [
        {
          "$ref": "#/definitions/ExpiryRange"
        }
      ]
    },
    "collector_address": {
      "description": "The address collecting marketplace fees",
      "type": "string"
    },
    "cw721_address": {
      "description": "The NFT contract",
      "type": "string"
    },
    "denom": {
      "description": "The token used to pay for NFTs",
      "type": "string"
    },
    "min_price": {
      "description": "Min value for bids and asks",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "operators": {
      "description": "Operators are entites that are responsible for maintaining the active state of Asks. They listen to NFT transfer events, and update the active state of Asks.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "trading_fee_bps": {
      "description": "Fair Burn fee for winning bids 0.25% = 25, 0.5% = 50, 1% = 100, 2.5% = 250",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "ExpiryRange": {
      "type": "object",
      "required": [
        "max",
        "min"
      ],
      "properties": {
        "max": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
