{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "stake_hooks"
      ],
      "properties": {
        "stake_hooks": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unstake_hooks"
      ],
      "properties": {
        "unstake_hooks": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_hooks"
      ],
      "properties": {
        "withdraw_hooks": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "vault_token"
      ],
      "properties": {
        "vault_token": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "vault_tokens_by_owner"
      ],
      "properties": {
        "vault_tokens_by_owner": {
          "type": "object",
          "required": [
            "owner",
            "query_options"
          ],
          "properties": {
            "owner": {
              "type": "string"
            },
            "query_options": {
              "$ref": "#/definitions/QueryOptions_for_TokenTimestampOffset"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "vault_tokens_by_stake_timestamp"
      ],
      "properties": {
        "vault_tokens_by_stake_timestamp": {
          "type": "object",
          "required": [
            "query_options"
          ],
          "properties": {
            "query_options": {
              "$ref": "#/definitions/QueryOptions_for_TokenTimestampOffset"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "vault_tokens_by_unstake_timestamp"
      ],
      "properties": {
        "vault_tokens_by_unstake_timestamp": {
          "type": "object",
          "required": [
            "query_options"
          ],
          "properties": {
            "query_options": {
              "$ref": "#/definitions/QueryOptions_for_TokenTimestampOffset"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "QueryOptions_for_TokenTimestampOffset": {
      "description": "Options when querying for VaultTokens",
      "type": "object",
      "properties": {
        "descending": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "limit": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "start_after": {
          "anyOf": [
            {
              "$ref": "#/definitions/TokenTimestampOffset"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "TokenTimestampOffset": {
      "type": "object",
      "required": [
        "timestamp",
        "token_id"
      ],
      "properties": {
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
